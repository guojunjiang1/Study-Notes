一：二叉查找树
即左小右大原理，左节点小于根结点，右节点大于根结点

二：平衡二叉树
二叉查找树+任一树它的左右两边结点高度差都不超过1

三：红黑树(属于平衡二叉树的一种，当左右两边结点高度超过1后会通过自旋操作来让树平衡)
hashmap的底层结构红黑树：
红黑树首先是基于二叉查找树的（左小右大），二叉查找树中查找结点最坏的查找次数=树的高度
红黑树的特点：
1：所有节点要么是红色要么是黑色
2：根结点和叶子结点永远都是黑色，且叶子节点为null
3：红色节点的两个子节点都是黑色(不可能有连在一起的红色结点)
4：从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点
红黑树的自旋和变色：
自旋：当满足一定条件时（左右结点的深度差大于1）实现自旋
变色：当插入或删除元素时，可能会破坏红黑树的特点即出现了两个相邻的红色节点或黑色节点，此时就需要变色来维持红黑树的特点

红黑树：插入，查找，删除的时间复杂度都是O(logn)，数组：查找O（1），插入删除：O（n），链表：查找O（n），插入删除O（1）

四：B+树
mysql的索引使用的是B+树结构（不使用hash的原因是，hash在进行范围查询时效率很低）
B树：为多插，且叶节点的深度相同，每个节点中存放16KB数据页（数据页中存放多个索引数据），叶节点的指针为空，每个节点都有指向子节点的指针
B+树：数据都在叶子节点按从小到大的顺序存储（InnoDB存储引擎，叶子节点直接存放索引对应的数据和主键，MyIseam存储引擎，叶子结点存放的是对应
数据的数据地址）、各个叶子节点间用指针相连、非叶子节点只存放索引
（16KB的页数据：索引，索引对应的数据，主键值，指向下一节点的指针）

B+树的好处：
①：B+树为多插，且每个节点都存放多个索引数据，这样每次查找到的数据就会变多，可以降低树高大大减少I/O次数来提高性能。
②：非叶子节点的数据页只存放指向下一个结点的指针和索引值，这样相比于B树(B树每个结点的数据页中还要包括索引对应的数据)可以存放更多的索引数据，从而提升总体的数据存储量，支持更多数据的存储。
②：B+树所有数据都在叶子节点，且按从小到大顺序排列，中间有指针相连，这样就支持了范围查找