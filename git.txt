集中式的版本管理工具：svn（电脑直接和svn中心库做交互，一旦中心库断掉可能就无法再交互了）
分布式的版本管理工具：git（每台电脑本地有一个本地库，远程有一个中心库，中心库挂了，还可以和本地库做交互）


*git可以划分为：本地仓库（本机上的git）和远程仓库（github,gitee或者gitlab）
*远程仓库：外网(github,gitee)所有人都能看到，内网(gitlab)公司内部使用
*本地仓库又可以划分为三个概念：工作区  (平时代码存放的地方且带有.git的文件)
  			   暂存区（工作区代码执行add命令添加到暂存区,可以提交/撤回）
			   本地库（代码执行commit添加到仓库中，git当中）	  

*本地库的操作流程(窗口版)
①：在写代码的工作目录右键添加到工作区
②：根据Tortoise将代码添加(add)到暂存区
③：将代码再提交(commit)到本地库

*本地库的操作流程(命令行版)
①：在写代码的工作目录打开git bash，执行git init(将代码添加到工作区)
②：设置签名(用于标识当前操作的用户)
       *项目签名:设置当前工作区的签名（仅在当前工作区内有效，跳转到新的工作区需要重新设置签名）
       *系统签名:设置整个操作系统的签名(设置一次后，跳转到新的工作区也可以用系统签名)
       签名优先级：之前设置了系统签名，在新的工作区中又设置了项目签名，则在新的工作区以项目签名为准
       （项目签名的内容保存在.git/config中，系统签名在windows根目录下/.gitconfig中）
       设置方式：
       git config user.name 用户名	git config user.email 邮箱(项目级别设置方式)
       git config --global user.name 用户名    git config --global user.email  邮箱(系统级别设置方式)
③：将工作区代码提交到暂存区
       git add 文件名
       *添加到暂存区的代码可以撤回，git restore --staged <文件名>
④：将暂存区代码提交到本地库
       git commit 文件名（在提交时，需要进入vim编辑器添加提交信息）
       git commit -m "提交信息" 文件名（这样不需要进vim编辑器）

*本地库中版本的前进和后退
①：先通过git reflog打印出提交的各个版本及对应的索引号
②：此时选择想要到的版本对应的索引号
       git reset --hard 索引：跳转到对应版本
	        （将工作区，暂存区，本地库的版本都统一变到对应版本）
       	    --soft 索引：（仅将本地库变到对应版本）
 	    --mixed 索引：（将本地库，暂存区跳到对应版本）

*文件删除后找回的方法
前提：删除前，文件已经提交到本地库
删除后，将删除文件信息再提交到本地库（指定文件名即可）
rm 文件，可以通过git reset --hard 索引：跳转到删除前的版本即可恢复
	             git restore 文件名：撤销这次删除操作

*文件差异比较
git diff 版本索引 文件名
eg:git diff fb3c a.txt（当前工作区中的a.txt和版本为fb3c的a.txt进行内容的比较）

*分支
分支：可以看做是克隆出一份新的matser，内容一模一样（我们创建出的git默认即是master分支）
作用：在开发中，可以推进多个版本的开发（A分支解决bug，B分支开发新功能）
          各个分支之间相互独立，某一分支开发失败不会影响其它分支，且分支修改内容其它分支是感知不到的
          分支开发成功后，合并到matser主分支即可。
命令：git branch 分支名：创建分支
          git branch -v：查看所有的分支
          git checkout 分支名：切换分支
          git merge 分支名：合并分支（当前分支合并指定的分支）
合并分支：①：创建出新的分支并切换过去，然后做一些操作
	 ②：切换到要被新增内容的分支
                 ③：执行合并命令

*分支合并冲突
场景：分支a和分支b都对同一个文件进行了修改，然后分支b要将a合并过来，执行merge时就发生冲突了
冲突展示：打开冲突文件后，head->>下面为当前分支冲突的内容，====下面为目标合并分支冲突的内容
解决方式：手动到冲突文件中，对内容做修改
                 git add 文件名
 	 git commit（直接commit就行，不需要写文件名）

*本地库和远程库的交互
一：团队内协作
A将本地库push到远程库，B将远程库所有数据clone到本地库，B进行修改然后将修改内容push到远程库
A再到远程库把B修改的内容pull到本地库 

*详细步骤
①：在本地创建出本地库
②：github创建出远程库
③：为远程库的地址设置别名(远程库地址有两种形式，一种是https的，一种是ssh的)
       一般这些地址都很长，我们在git操作不方便，所以我们可以在git上为这些地址设置别名
       git remote add 别名 原地址名（以后直接操作别名，即是操作原地址名）
       git remote -v：查看已设置的别名
④：A将本地库内容push到远程库
       git push 别名/地址名 本地分支名
       （A是leader，除了master分支外，再推送创建一个dev分支）
⑤：B将远程库代码克隆到本地
       git clone 远程库地址  （克隆下来后，自动为远程仓库起了别名：origin，并且会clone所有分支）
⑥：A邀请B加入到团队中 / A在github创建一个小组，B在这个小组内，项目也是在小组下建立的
       A在github的仓库的setting,MangeAccess中输入想要邀请的成员名字，邀请加入即可。
       B在github上点击接受，这样B就加入了A的团队了
⑦：此时B就可以做操作，B基于dev分支创建分支guo，进行操作，然后提交到本地库，然后推送到github了
⑧：A就可以对B提交的分支做review（检查合并）了
      有两种review方法：
      一：B在远程库向A发出pull request（指定从guo分支合并到dev分支），A对内容进行检查，然后可以执行合并
             >A将合并后的最新内容拉取到本地库
               git pull 远程库别名/地址名 远程库分支名
               git fetch 远程库别名/地址名 远程库分支名+git merge 远程库别名/远程库分支名
               pull=fetch+merge，pull直接将远程库内容拉取到本地并覆盖本地内容
               fetch：将远程库内容拉取到本地，merge：将远程库内容合并到本地库
               可以在本地库checkout 远程库别名/远程库分支名，来查看远程库拉取下来的内容
      二：A在本地创建guo分支(因为在pull分支时，会将远程库要pull的分支内容，覆盖本地库当前所在分支，所以我们在pullguo分支时
      需要先在本地库，创建并切换到guo分支)，将远程库B提交的guo分支pull下来，进行检查，然后切到dev后merge了guo分支，推送到远程库
⑨：对dev分支进行测试
       一般在上线前，需要测试团队C对新开发的内容再进行测试
      C将远程库clone下来，基于dev分支创建release分支，进行测试
       测试通过后，和之前一样可以在github上发出pullrelease合并，或者直接切换到master分支合并release推送到远程
⑩：这时master就又有正式版本了，我们就可以创建tag标签，然后推送到远程，生成正式版本

*本地库与远程库的冲突
问题的产生：
本地库拉取远程库内容下来，然后进行修改，准备提交到远程库的时候，发生了冲突（其他人先一步对远程库进行了提交）
问题的解决：（和解决分支冲突类似）
①：先将远程库的最新内容pull下来
②：然后对产生冲突的文件进行修改
       add到暂存区
       commit到本地库（commit时不能加文件名）
③：将修改后的内容push到远程库

二：跨团队协作
①：B将A的远程库fork(github页面上就有)一份新的出来
②：B到远程库将代码clone到本地库，进行修改，然后push回去(注意:此时只会push到B的远程库，A的远程库没有修改)
③：B向A发出pullRequest请求，在github上：点击Pull requests
				      new pull request
				      create pull request：向原仓库主即A，发出修改请求
④：A审核B请求的内容，在github上：点击Pull requests
			          点击Commits和Files changed：查看B做了哪些提交，和具体文件的修改
⑤：A将B请求的内容合并到远程库：在github上：点击Merge pull request
⑥：A将远程库的内容再pull同步到本地库就可以啦

*远程操作的两种方式
一：通过https和github做交互
①：获取github上仓库的https，这个https就是原地址名
②：执行push/pull操作的时候，指定这个https原地址名就可以了
二：通过ssh和github做交互
①：进入git，输入cd ~
②：rm -rf .ssh
③：ssh -keygen -t rsa -C <github账号>：根据rsa非对称算法生成公钥私钥
④：将公钥配置到github上，Settings->SSH and GPGkeys
⑤：这时在执行push/pull操作的时候，指定ssh地址就可以了
区别：
通过https的方式和远程库做交互每次都需要填写github账号密码
通过ssh的方式提前配置好公钥，每次做交互时候直接交互即可无需再次输入账号密码
*不过win10系统自带了凭据可以记录github的账号密码，因此在win10上对于https的方式输入一次账号密码即可

*进阶
>rebase：使提交记录变简洁
功能：
一：将多个提交记录整合成一个记录
有时我们可能写完一些代码，就提交到本地，但从宏观角度来说，可以把多次小的提交记录，合并成一次大的提交记录。
命令：git rebase -i HEAD~N（表示合并当前所在版本及其前n-1个版本）
          执行完命令后进入一个vim界面，这个界面用于设置版本合并的规则，将pick改为s表示合并到一起
          :wq后还会进入一个vim界面，这个界面用于设置合并后的提交信息
注意：尽量不要合并已经提交到远程库的版本记录（不然会导致本地库和远程库版本记录不一样，出现冲突）
二：在合并分支时，让分支记录和主支记录变得简洁
只需在切到主支合并前，在分支执行git rebase <主支名>即可。
三：在执行pull时，我们知道可以执行fetch+merge的命令来代替pull，但它会让提交记录中出现分叉
因此也可以使用fetch+rebase的命令来代替pull，并避免出现分叉
命令：git fetch 远程库/别名 远程库分支名，git rebase 远程库/远程库分支名

rebase冲突：
执行rebase时也会发生冲突，大概率是因为同一文件冲突情况（远程库和本地库文件冲突，分支和分支文件冲突）。
我们可以先解决了冲突情况，然后执行git rebase --continue（rebase继续执行）

>beyond compare:解决冲突
它是一个软件，专门用来解决冲突的（当出现文件冲突，手动修改不是很方便，这时候就可以使用beyond compare来解决了）
使用方法：①：下载bc
   	 ②：在C:/用户/EasonG丶/.gitconfig中进行配置
	 ③：执行git config --local mergetool.keepBackup false（设置解决冲突后，不保留源冲突文件）
                 ④：发生冲突后，执行 git mergetool解决冲突（它会弹出bc界面来，bc界面中可选择上/下一个冲突来解决所有的冲突）
	 ⑤：解决完冲突后commit一下

>tag 添加标签
在git log中可以查看版本，但是看到的版本号都是一串hash值，不太友好，因此我们可以为这些版本来添加标签进行标识
命令：git tag -a <标签名> -m “标签描述”：为当前所在版本添加一个标签
          git push 远程库名/别名 --tags：将标签推送到远程仓库（远程仓库也可以以标签的形式查看代码）
eg：写完第一个功能，添加一个标签v1，写完第二个功能，添加标签v2，提交到github后，github可以在Tags中查看所有提交过的
        标签，并且每个标签都有对应的代码（标签对应当时所在版本的代码），标签的提交与分支提交无关（即可以直接提交标签）。

Idea中将代码存放到github的步骤：	
一：在IDEA中配置git，配置github
二：VCS->import into Version control->create git repository:创建git本地仓库
       VCS->import into Version control->share project on github:提交到github上
三：已提交的代码发生修改，同步到github的步骤
      vcs->git->add，vcs->git->commit，vcs->git->push

***常用命令：
①：本地库的命令
git init:初始化本地库
git config user.name <名称>：设置签名名称，git config user.email <名称>：设置签名邮箱
git add <文件名>：将文件添加到暂存区，git add . ：将当前目录下所有文件添加到暂存区
git commit -m "提交信息" <文件名>：将文件添加到本地库，git commit -m “提交信息”. ：将所有文件添加到本地库

②：分支命令
git branch <分支名>：创建分支
git branch -v：查看已创建的分支
git checkout <分支名>：切换分支
git checkout -b <分支名>：创建并切换到新创建的分支下
git merge <分支名>：当前所在分支合并指定的分支名
git checkout master，git branch -D<分支名>：删除分支

③：查看git的提交记录：
git log
git reflog
git log --pretty=oneline
git log --graph：图形打印
git log --graph --pretty=format:"%h %s"

④：版本的回退/前进
git reset --hard <版本号>:回退/前进到指定版本
git restore 文件名：撤销这次删除操作

⑤：查看git工作区，暂存区的变更情况
git status

⑥：为远程库httpUrl设置别名
git remote add <别名> <原地址名>

⑦：远程库的命令
git push <别名/远程地址名> <本地分支名>：将本地库内容提交到远程库
git clone <别名/远程地址名> ：将远程库克隆一份到本地库
git pull <别名/远程地址名> <远程分支名>：将远程库新增内容拉取到本地库并直接合并
pull=fetch+merge
git fetch <别名/远程地址名> <远程分支名>：将远程库新增内容拉取到本地，并创建一个分支
git checkout <别名/(+)远程分支名>：切换到刚fetch创建的分支，可以查看拉取下来的内容
git merge <别名/(+)远程分支名>：将fetch拉取下来的内容合并到本地库中

⑩：有的时候，本地分支在master分支，然后忘了切其他的分支去修改，直接在master改了，然后也push到远程了。
等你发现的时候，你会真的想骂自己。
咋办？最简单的办法其实我们还是可以git reset --hard到对应的版本，然后将其修改或者复原，
再强制提交到master分支：git push -u origin/master -f
（我们的代码都是提交到远程仓库的分支里，最后再用master合并分支）

场景：
一：修复bug和开发的场景
线上跑的是master分支的代码，这时有了新需求要添加功能，于是乎创建出一个A分支来添加功能，线上又出现了BUG，于是乎创建出一个B分支来
修复BUG，最终master分支合并B分支解决BUG，master分支合并A分支添加功能。
（分支的应用：可以同时推进多个任务）
二：git工作流规范
对于master分支，只存放稳定的线上版本，项目组长一般会创建一个dev分支，开发的组员再基于dev分支创建新的分支，组员开发完毕，请求将
代码合并到dev分支，组长在检查通过后将内容合并到dev，会再拉取出一个release分支进行测试，最终没问题会提交到master分支
三：远程仓库和本地仓库分支问题
推送时选择的分支，也会推送到远程仓库的分支（eg：推送guo分支，github也会新出现一个guo分支）
克隆仓库到本地时，其实就将github上的所有分支都克隆到本地了
在pull时，会将内容pull到本地库当前所在分支，因此需要先对本地库的分支进行切换再pull
四：如何在不影响本地文件的情况下，删除github上的文件
git rm -r --cached <文件名>
git commit -m "信息"
git push -u <远程仓库地址> <本地分支名>
五：给开源代码做贡献
fork一份到自己的仓库，clone下来对代码进行修改，在github上发出pullRequests指定从自己的哪个分支合并到作者的哪个分支
六：配置文件
①：当前项目配置文件，就在当前项目的.git目录下的config，命令为--local或者什么都不指定，就是配置当前项目的配置文件
②：全局配置文件，在C:/用户/EasonG丶/.gitconfig，命令中添加--global就是配置全局配置文件
（当前项目配置文件优先级高，对于同一配置两个配置文件中都有则会以当前项目配置文件为主）
七：git忽略文件
gitignore：本地仓库创建.gitignore，在这个文件中配置文件名，让git不再管理这些配置的文件名（项目中的一些配置文件就可以直接忽略掉）
编写规则：编辑 .gitignore文件：
	①：文件名：表示git忽略这个文件
	②：*.java：表示git忽略所有以.java结尾的文件
	③：！*.java：表示git忽略所有不以.java结尾的文件
	④：文件夹名/：表示git忽略指定文件夹下的所有文件
* https://github.com/github/gitignore：这里面有各种语言常用的.gitignore文件内容
八：github上的一些文件
issue：一些读者的提问和作者的回答
wiki：关于本项目的文档（用到的知识点，需要注意的地方）

https://oschina.gitee.io/learn-git-branching/

https://juejin.im/post/6844904177009688584#heading-4