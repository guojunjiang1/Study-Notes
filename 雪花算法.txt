雪花算法是推特公司推出的针对微服务架构生产数据库主键的方式

不使用主键自增的原因：在数据库集群（或者分库分表后）的环境下，需要为各个数据库设置不同的步长（防止出现主键一样的情况），且高并发情况下效率太低，每次主键自增都会耗费大量的性能（每次都执行replaceinto操作）
不使用UUID的原因：第一他的长度太长，且无序，每次插入一条记录，由于它是字符串形式的，都会对主键索引对应的树的结构进行大量的修改
不使用redis的原因：使用redis的incr生成主键，但还要耗费精力去搭建redis集群环境，且它在集群环境下也需设置不同的步长

它是一个64位长度的long型整数，由一位始终为0的符号位 41位的时间戳 10位的机器位（5位的datacenterId机器号，5位的workerId机房号）
12位的序列位组成。
64位long型在JAVA中长度为8，因为long占用8位
缺点：它是依赖于时间戳的，集群环境下各个电脑的时间不可能完全相同，可能会出现生成相同的Id的情况。