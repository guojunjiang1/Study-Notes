Springboot：①：起步依赖：将某种功能的坐标打包到一起，也就是整合多个jar包成一个jar包
	     ②：自动配置：Springboot可以在项目启动时加载大量的自动配置类
常用注解：（https://www.cnblogs.com/ldy-blogs/p/8550406.html）
	 @ConfigurationProperties(pefix=“前缀”)注解的方式从yml获取配置（eg：test：deg: 123 在程序中就可以指定prepix=“test”并在代码中提供deg属性的get/set方法来注入123）
		@EnableConfigurationProperties：使使用 @ConfigurationProperties 注解的类生效。
	 @Value（"${前缀}"）:从yml中获取配置
	 @Configuration：标明当前类是一个配置类
	 @ComponentScan（basePackages={"包名"}）:扫描指定包下的组件
	 @MapperScan("包名"):扫描dao层的mapper
	 @EntityScan（"包名"）：扫描实体类（springDataJpa）
	 @Import：导入其他配置类
	 @ImportResource：加载xml配置文件
	 @Resource和@Autowired:都是自动注入一个是ByName一个是ByType
	 @ControllerAdvice。@ExceptionHandler（异常类型.class）用于全局异常处理
自动配置原理：
①：在启动类会添加@SpringBootApplication注解，在项目启动时会扫描到该注解。	
该注解包括ComponentScan，EnableAutoConfiguration，SpringBootConfiguration（标明该类SpringBoot的主配置类）
②：通过EnableAutoConfigurantion实现自动配置
       它会从当前类路径下的META-INF/spring.factories中获取配置，将这些配置封装成自动配置类导入容器中，这时自动配置就完成了
       （通俗来讲，SpringBoot会根据引入的SpringBoot的Jar包中META-INF目录下的Spring.factories(配置了Jar包中的类的全限定类名)文件中的参数来封装成bean放入Spring容器中）
③：它还会自动扫描启动类及其子包下的所有组件到容器中

单体架构和分布式和微服务：
单体架构：整个系统部署在一个进程里，整个项目打包成一个jar包运行
分布式：与集中式相对应，分布式是由若干个独立的机器通过网络组合而成，一个服务做集群或是一个服务拆分出多个小服务，然后部署到不同机器上，都可以看作是分布式
              eg：整个系统部署在多个进程里，mysql部署到一个机器里，web部署到一个机器里，redis部署到一个机器里
微服务：将一个完整系统的功能根据业务拆分称为多个不同的系统，这多个系统都叫微服务
             将这多个服务分别部署到不同的机器上，此时这个系统既是微服务架构也是一个分布式架构		

前后端分离：随着业务的不断发展，需要将原来前后端放在一起的形式，分割开来，成立专门的前端部门，来开发前端，前后端可以通过swagger文档来进行接口的规范，好处就是利于管理，且前后端分离开发效率高

微服务好处：
①：将模块进行划分有利于扩展性
②：在团队进行协同开发更加方便
③：在程序进行扩展时可以有针对性的扩展，eg：下单微服务需要扩展，那么就对下单微服务扩展，其他微服务不用像之前的单体架构一样要扩
展所有模块都扩展
④：一个服务出问题不会影响到整个系统
⑤：在提交代码时不易发生冲突

坏处：
①：微服务之间RPC调用会有延时
②：涉及到分布式事务
	           	
