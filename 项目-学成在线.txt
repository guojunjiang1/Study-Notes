前提软件：nginx，mongodb，elasticSearch，logstash，redis，虚拟机（FastDfs）

后端技术栈：SpringBoot，Springcloud，Mybatis，SpringDataJPA，SpringSecurity+OAuth2，redis，mysql，elasticSearch，nginx，rabbitmq
CMS管理系统：各个项目对于CMS的定位是不同的，电商系统对CMS的定位可能是商品管理而学成在线对于CMS的定位就是页面管理了，负责页面的预览和下载
swagger的工作原理：在API工程下添加了swagger的配置，其他工程的启动类添加对API工程的包扫即可，地址：http://localhost:端口/swagger-ui.html

CMS页面预览：
一：管理员提前创建好模板，并将模板存放到girdFS当中，在模板数据库指定模板文件的id
二：管理员提前将数据接口URL存入到页面数据库中
三：根据页面ID执行页面预览
四：获取页面对应的数据和模板
五：根据数据和模板执行页面静态化，并返回页面

CMS页面发布：
一：调用页面预览，获取静态化页面
二：调用girdFS，将静态化页面存入girdFS中，并将生成的HTMLFILEID存入页面数据库
三：发送一条RabbitMQ消息
四：接收方接收RabbitMQ消息，根据传递的页面ID，获取HTMLFILEID根据其到GirdFS中获取静态化页面
五：将静态化页面下载到本地服务器上
*** 不同的页面发布到不同的服务器上，如轮播图静态化页面就发布到门户主站服务器，课程静态化页面就发布到课程服务器上，因此需要在服务器上部署MQ页面接收的服务，然后将其下载到对应服务器上。
      此时消息发送方的RoutingKey就是站点ID，不同的页面类型用不同的服务器接收。
      用户点击前端页面时，根据uri通过nginx反向代理到对应服务器上的静态化页面，然后返回前端。

*** 新增一个页面的步骤
一：制作模板tfl，通过程序将模板存入girdFS中，获取模板文件ID
二：创建模板数据，指定所属站点ID和模板文件ID
三：创建数据config
四：创建页面指定DataURL和模板ID
五：页面发布

Course页面预览：
一：为当前课程创建一个CMS页面
二：通过Feign远程调用CMS服务，保存或更新CMS页面
三：向前端返回CMS服务中页面预览的URL并携带CMS页面ID
四：前端点击该URL完成页面预览

Course页面发布：
一：校验课程当前课程，当前课程必须存在课程计划，且课程计划必须有对应视频
二：为当前课程创建一个CMS页面
三：通过Feign远程调用CMS服务的一键发布
	根据传递的CMS页面进行保存或更新
	调用CMS的页面发布功能
	返回页面发布后访问课程页面的URL（站点域名+站点WebPath+页面WebPath+页面名称）
四：修改课程的发布状态
五：将课程信息保存到Course_Pub中（等待logstash同步到elasticSearch中）
六：将课程计划保存到TeachPlan_media_pub中（等待logstash同步到elasticSearch）
logstash原理：logstash中有一个最后读取数据库的时间，每次读取完数据库之后都会更新这个时间time
	       logstash会配置一个同步数据的sql：select * from table where table.time>time：查询插入时间大于logstash时间的数据，执行完之后又会把logstash时间设为当前时间以免重复读取数据

文件上传：
分布式架构所以采用FastDFS的方式保存文件（还可以使用各种云存储或DataURL存储）
一：用户上传文件，请求FastDFS服务
二：调用FastDFS对其进行保存并返回文件ID
三：将文件ID等信息存入文件数据库（mongodb中）
四：在哪个模块调用的文件上传就自己调用自己的接口保存文件信息
      （eg：课程模块上传照片，在保存到FastDFS后，将文件ID再保存到课程数据库）
前端调用两次接口

视频上传：
视频采用FFmpeg进行处理 
一：校验该视频是否已存在
二：查看该视频对应的块文件是否存在
三：上传块文件
四：将块文件进行合并，并将视屏信息保存到mongodb的mediaFile中
主要是前端进行控制，执行第一步，若对应视频已存在则退出，不存在执行第二步，若块文件已存在执行第四步，不存在执行第三四步
五：发送一条RabbitMQ消息
六：接收方接收到RabbitMQ消息，获取mediaID，然后获取视屏地址
七：判断视屏的类型，如果是mp4则不需要转换，如果是avi则将其转换为mp4类型
八：将视屏转换成m3u8类型
上传时采用块文件方式的好处：为防止上传文件突然失败，分块上传，下次就不用全上传了。
将视屏转换成m3u8的好处：在播放视频时，实现点哪里看哪里，不卡顿

认证授权
先根据RSA非对称算法生成私钥和公钥
一：用户输入用户名和密码请求登录
二：授权模块获取到用户名密码后通过密码模式获取令牌
       密码模式中根据用户名查询用户信息
       自动进行密码校验，且封装用户权限信息
三：密码校验成功，根据私钥生成令牌：JWT令牌，用户令牌，刷新令牌
四：将用户令牌作为KEY，其他令牌信息作为Value存入redis，并设置过期时间
五：将用户令牌存放到COOKIE当中

单点登陆：一处登陆，处处生效，将认证授权抽取成单独的子系统，用户第一次访问时请求该系统，生成token后存放到redis或请求头/cookie当中，此时就可携带token访问各个子系统，各个子系统都引入
校验token的功能，这样就实现一处登录，处处生效了。

用户访问流程：
一：用户根据COOKIE中的用户令牌获取到JWT令牌信息，将JWT令牌存入到请求头中
二：请求到达网关，过滤器中对身份做校验，判断redis中令牌信息是否过期，判断头信息中是否存在JWT令牌
三：将请求路由到对应资源
四：自动通过公钥对jwt令牌校验
五：根据要请求方法上的权限信息，判断jwt令牌中是否包含该权限

订单支付成功添加选课信息：
一：将订单的信息存入xc_task表中
二：开启定时任务，定时扫描task表中一分钟前的记录
三：获取到记录后，为防止集群下同时发送多条消息，做乐观锁，且更新记录时间，发送mq到课程微服务
四：课程微服务监听到消息后，先根据消息的内容做幂等性校验
五：根据消息中的内容为用户添加课程
六：添加成功，在course_task中添加一条记录（保证幂等性用），向订单微服务发送处理成功mq
七：订单微服务接收到消息，将对应xc_task表中记录删除
这么做是分布式事务，保证最终一致性。